//sort the most resent by dates
const sortedAppointments = appointments.sort((a, b) => {
        const aDateTime = new Date(a.appointmentDate + "T" + a.appointmentTime);
        const bDateTime = new Date(b.appointmentDate + "T" + b.appointmentTime);
        return bDateTime - aDateTime;
      });
      // Select the most recent appointment
      const mostRecentAppointment = sortedAppointments[0];
      console.log("mostRecentAppointment:", mostRecentAppointment);
      
    
      function getCookie(name) {
        const cookieName = `${name}=`;
        const cookies = document.cookie.split(';');

        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i].trim();
            if (cookie.startsWith(cookieName)) {
                const encodedValue = cookie.substring(cookieName.length);
                const decodedValue = decodeURIComponent(encodedValue);
                return JSON.parse(decodedValue);
            }
        }
        return null;
    }

    function getCookieSize(name) {
        const cookieName = `${name}=`;
        const cookies = document.cookie.split(';');

        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i].trim();
            if (cookie.startsWith(cookieName)) {
                // Calculate the size of the cookie in bytes
                const encodedValue = cookie.substring(cookieName.length);
                const decodedValue = decodeURIComponent(encodedValue);
                const sizeInBytes = encodedValue.length * 2; // Assuming 2 bytes per character
                return sizeInBytes;
            }
        }
        return 0; // Cookie not found
    }

    useEffect(() => {
        const storedArray = getCookie("myArray");
        if (storedArray !== null) {
            console.log("Retrieved Array from Cookie:", storedArray);
        } else {
            console.log("Cookie not found or invalid.");
        }



        const cookieSize = getCookieSize("myArray");
        if (cookieSize > 0) {
            console.log(`Size of "myArray" cookie: ${cookieSize} bytes`);
        } else {
            console.log("Cookie not found or invalid.");
        }

    }, [])
    
    
     useEffect(() => {
        const handleClickOutside = (event) => {
            if (timeRef.current && !timeRef.current.contains(event.target)) {
                setIsFocused(false);
            }
        };
        if (isFocused) {
            document.addEventListener('click', handleClickOutside);
        } else {
            document.removeEventListener('click', handleClickOutside);
        }

        return () => {
            document.removeEventListener('click', handleClickOutside);
        };
    }, [isFocused]);

    const handleFocus = () => setIsFocused(true);

    const handleBlur = () => setIsFocused(false);


    //disabling input after uploading or before uploaidng the file via button


        const openMedia = () => {
        let fileInput: any = document.getElementById("file");
        fileInput.removeAttribute("disabled");
        fileInput.click();
        fileInput.setAttribute("disabled", "disabled");
    }


    //handle outside click from child directly
    const handleClickOutside = (event) => {
        if (ref.current && !ref.current.contains(event.target)) {
          setLogin(false);
        }
      };
    
      useEffect(() => {
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
          document.removeEventListener('mousedown', handleClickOutside);
        };
      }, []);


